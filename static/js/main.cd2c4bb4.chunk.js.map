{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","map","index","key","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA0BA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAA/B,KAsBJ,SAASK,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,iBAMvCO,MApDf,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOH,EAA0BK,EAA1BL,OAAQM,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEpCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZS,EAAOE,IAAK,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAEhEf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACVU,IAGLb,EAAAC,EAAAC,cAAA,UAAKO,KCsCIQ,6MArDbC,MAAQ,KAePC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,EAAKC,WADd,OACNP,EADMG,EAAAK,KAEZF,EAAKG,SAAS,CACZT,WAHU,wBAAAG,EAAAO,SAAAX,EAAAY,WAOdJ,SAAW,WACT,OAAOK,MAAM,yDACZC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAE,GAAI,OAAIA,EAAKC,KAAKhB,SACxBiB,MAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAI7BG,cAAgB,WAWd,OAVef,EAAKT,MAAMG,OAAOP,IAAI,SAAA6B,GAEnC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,CACLnC,MAAOkC,EAAME,cACbvC,OAAQqC,EAAMG,mBACd9B,IAAK2B,EAAMI,GACXnC,OAAQ+B,EAAM/B,OACdC,SAAU8B,EAAM9B,kGAlCpB2B,QAAQC,IAAI,0DAOZT,KAAKb,8CAkCL,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAW6B,KAAKd,MAAMG,OAAS,MAAQ,gBACzCW,KAAKd,MAAMG,OAASW,KAAKU,gBAAkB,kBAjDlCM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.cd2c4bb4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './Movie.css';\r\n\r\n// smartcomponent -> dumb component로 변경\r\n// 클래스 안에는 this가 있지만 functional 컴포넌트는 this가 필요 없음.\r\nfunction Movie({title, poster, genres, synopsis}){\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie_Columns\">\r\n        <MoviePoster poster={poster} alt={title}/>\r\n      </div>\r\n      <div className=\"Movie_Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie_Genres\">\r\n          {genres.map( (genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n        </div>\r\n        <p className=\"Movie_Synopsis\">\r\n          {synopsis}\r\n        </p>\r\n      </div>\r\n      <h1>{title}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return (\r\n    <span className=\"Movie_Genre\">{genre} </span>\r\n  )\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\n/*\r\n functional stateless component ( dumb component)\r\n*/\r\nfunction MoviePoster({poster, alt}){\r\n  return(\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Movie;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {}\n\n  // 만약 영화 앱을 만든다면 willMount()를 진행할 때 영화 api를 호출한다.\n  componentWillMount(){\n    console.log('will mount')\n\n  }\n\n\n  // 컴포넌트가 마운트 되면 5초 기다리고 state를 업데이트 하겠다.\n  componentDidMount() {\n    this._getMovies()\n  }\n\n\n   _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then( response => response.json() )\n    .then( json => json.data.movies )\n    .catch( err => console.log(err) )\n  }\n\n  // 리액트는 자체 기능이 많기 때문에 직접 만든 function과 차이점을 두기 위해 언더스코어를 사용\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      // 리액트는 array 엘리먼트일 경우 unique key를 줘야함\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  render() {\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM은 리액트를 웹사이트에 출력(render)하는걸 도와주는 모델\n// 리액트를 웹에 올리고 싶다면 -> reactDOM을 쓰고 리액트를 모바일에 올려놓고 싶다면 -> reactNative를 사용\n// 리액트 - UI 라이브러리 / 리액트DOM - 리액트를 웹사이트에 출력해 줌\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}